Prob: https://leetcode.com/problems/surrounded-regions/
____________________________________________________________________________________________________________________________________

Explanation:

This is based on DFS from boundary.
_____________________________________________________________________________________________________________________________________

Code:

class Solution:
    def solve(self, board: List[List[str]]) -> None:
        """
        Do not return anything, modify board in-place instead.
        """
        if not board:
            return []
        def dfs(board,i,j):
            if i < 0 or j < 0 or i >= len(board) or j >= len(board[0]) or board[i][j] != 'O':
                return
            
            else:
                board[i][j] = "S"
                
                dfs(board,i+1,j)
                dfs(board,i,j+1)
                dfs(board,i-1,j)
                dfs(board,i,j-1)
                
                
        
        for j in range(len(board[0])):
            if board[0][j] == 'O':
                dfs(board,0,j)
            if board[len(board)-1][j] == 'O':
                dfs(board,len(board)-1,j)
        
        for i in range(len(board)):
            if board[i][0] == 'O':
                dfs(board,i,0)
            if board[i][len(board[0])-1] == "O":
                dfs(board,i,len(board[0])-1)
                
        
        for i in range(len(board)):
            for j in range(len(board[0])):
                
                if board[i][j] == 'O':
                    board[i][j] = "X"
                if board[i][j] == 'S':
                    board[i][j] = 'O'
                    
                        
    
        
