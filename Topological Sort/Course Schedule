Prob: https://leetcode.com/problems/course-schedule/
_______________________________________________________________________________________________________________________

Explanation:
-------------

Just check if the graph is cyclic or not ( using coloring method)

from pre-req create an adj list

__________________________________________________________________________________________________________________________

Code:

class Solution:
    def canFinish(self, n: int, p: List[List[int]]) -> bool:
        from collections import defaultdict

        adj = defaultdict(list)

        for x,y in p:
            adj[y].append(x)
        
        for i in range(n):
            if i not in adj:
                adj[i] = []

        colors = {}

        for k in adj.keys():
            colors[k] = "White"


        def dfs(sv,colors):
            colors[sv] = "Gray"
            for n in adj[sv]:
                if colors[n] == "Gray":
                    return True
                if colors[n] == "White":
                    if dfs(n,colors) == True:
                        return True

            colors[sv] = "Black"
            return False


        def detect_cycle(adj,colors):

            for sv in adj.keys():
                if colors[sv] == "White":
                    if dfs(sv,colors) == True:
                        return True

            return False

        if detect_cycle(adj,colors) == True:
            return False
        else:
            return True



