Prob: https://leetcode.com/problems/course-schedule-ii/
____________________________________________________________________________________________________________________________________

Explanation:
-------------
Detect cycle and apply topological sort

_____________________________________________________________________________________________________________________________________

class Solution:
    def findOrder(self, n: int, p: List[List[int]]) -> List[int]:
        from collections import defaultdict

        adj = defaultdict(list)

        for x,y in p:
            adj[y].append(x)
        for i in range(n):
            if i not in adj:
                adj[i] = []

        colors = {}

        for k in adj.keys():
            colors[k] = "White"


        def dfs(sv,colors):
            colors[sv] = "Gray"
            for n in adj[sv]:
                if colors[n] == "Gray":
                    return True
                if colors[n] == "White":
                    if dfs(n,colors) == True:
                        return True

            colors[sv] = "Black"
            return False


        def detect_cycle(adj,colors):

            for sv in adj.keys():
                if colors[sv] == "White":
                    if dfs(sv,colors) == True:
                        return True

            return False

        flag = detect_cycle(adj,colors)

        if flag == True:
            return []

        else:

            stack = []
            visited = set()

            def dfs(sv):
                for n in adj[sv]:
                    if n not in visited:
                        visited.add(n)
                        dfs(n)
                stack.append(sv)


            for sv in range(len(adj)):
                if sv not in visited:
                    visited.add(sv)
                    dfs(sv)
            ans = []
            while stack:
                ans.append(stack.pop())
            #ans.reverse()    

            return ans





