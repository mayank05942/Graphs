Prob: https://practice.geeksforgeeks.org/problems/detect-cycle-in-an-undirected-graph/1
_________________________________________________________________________________________________________________________________________________________

Explanation:

https://www.youtube.com/watch?v=u_GqKBsD7-8&list=PLpO3gASfJEIJ6cYs4kAY3SnH2kpohSTZI&index=8&t=0s

we have to search for a node that is visited prev and is not it's parent. Whenever such node will exist then we will a cyclic graph.


_________________________________________________________________________________________________________________________________________________________
Code:

def dfs(g,sv,visited,parent):
        visited[sv] = True
        
        for i in g[sv]:
            if visited[i] == False:
                #visited[i] = True
                if dfs(g,i,visited,sv):
                    return True
                
            elif i != parent:
                return True
        return False
        
        
def isCyclic(g,n):
    '''
    :param g: given adjacency list representation of graph
    :param n: no of nodes in graph
    :return:  boolean (whether a cycle exits or not)
    '''
    # code here
    
    visited = [False]*n
    for sv in range(n):
        if visited[sv] == False:
            if dfs(g,sv,visited,-1):
                return 1
    
    return 0
