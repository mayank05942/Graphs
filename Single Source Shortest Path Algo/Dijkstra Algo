The Dijkstra algorithm is an algorithm used to solve the shortest path problem in a graph. This means that given a number of nodes and the edges between them as well 
as the “length” of the edges (referred to as “weight”), the Dijkstra algorithm is finds the shortest path from the specified start node to all other nodes.
Nodes are sometimes referred to as vertices (plural of vertex) - here, we’ll call them nodes.

Description of the Algorithm:
------------------------------

The basic principle behind the Dijkstra algorithm is to iteratively look at the node with the currently smallest distance to the source and 
update all not yet visited neighbors if the path to it via the current node is shorter. In more detail, this leads to the following Steps:

1 -Initialize the distance to the starting node as 0 and the distances to all other nodes as infinite
2 -Set all nodes to “unvisited”
3 -While we haven’t visited all nodes:

4 -Find the node with currently shortest distance from the source (for the first pass, this will be the source node itself)
5 -For all nodes next to it that we haven’t visited yet, check if the currently smallest distance to that neighbor is bigger than if we were to go via the current node
6 -If it is, update the smallest distance of that neighbor to be the distance from the source to the current node plus the distance from the current node to that neighbor
7 -In the end, the array we used to keep track of the currently shortest distance from the source to all other nodes will contain the (final) shortest distances.

Code:
______

def dijkstra(graph, start):
   
    # This contains the distances from the start node to all other nodes
    distances = [float("inf") for _ in range(len(graph))]

    # This contains whether a node was already visited
    visited = [False for _ in range(len(graph))]

    # The distance from the start node to itself is of course 0
    distances[start] = 0

    # While there are nodes left to visit...
    while True:

        # ... find the node with the currently shortest distance from the start node...
        shortest_distance = float("inf")
        shortest_index = -1
        for i in range(len(graph)):
            # ... by going through all nodes that haven't been visited yet
            if distances[i] < shortest_distance and not visited[i]:
                shortest_distance = distances[i]
                shortest_index = i

        # print("Visiting node " + str(shortest_index) + " with current distance " + str(shortest_distance))

        if shortest_index == -1:
            # There was no node not yet visited --> We are done
            return distances

        # ...then, for all neighboring nodes that haven't been visited yet....
        for i in range(len(graph[shortest_index])):
            # ...if the path over this edge is shorter...
            if graph[shortest_index][i] != 0 and distances[i] > distances[shortest_index] + graph[shortest_index][i]:
                # ...Save this path as new shortest path.
                distances[i] = distances[shortest_index] + graph[shortest_index][i]
                # print("Updating distance of node " + str(i) + " to " + str(distances[i]))

        # Lastly, note that we are finished with this node.
        visited[shortest_index] = True
        # print("Visited nodes: " + str(visited))
        # print("Currently lowest distances: " + str(distances))
_____________________________________________________________________________________________________________________________________________________________________

import heapq


def calculate_distances(graph, starting_vertex):
    distances = {vertex: float('infinity') for vertex in graph}
    distances[starting_vertex] = 0

    pq = [(0, starting_vertex)]
    while len(pq) > 0:
        current_distance, current_vertex = heapq.heappop(pq)

        # Nodes can get added to the priority queue multiple times. We only
        # process a vertex the first time we remove it from the priority queue.
        if current_distance > distances[current_vertex]:
            continue

        for neighbor, weight in graph[current_vertex].items():
            distance = current_distance + weight

            # Only consider this new path if it's better than any path we've
            # already found.
            if distance < distances[neighbor]:
                distances[neighbor] = distance
                heapq.heappush(pq, (distance, neighbor))

    return distances
_________________________________________________________________________________________________________________________________________________________________________

Without Distances and heapq

times = [[2,1,1],[2,3,1],[3,4,1]]

# [start,end,weight]
import collections
d = collections.defaultdict(list)

for start,end,weight in times:
    d[start].append((end,weight))

print(d)




import heapq

n = 4

start_vertex = 2
distance = [float('inf')]*n
visited = [False]*n
distance[start] = 0

queue = []

heapq.heappush(queue,(0,start_vertex))  # 0 is the dist
shortest_path = {}
while queue:

    curr_dist,curr_vertex = heapq.heappop(queue)

    if curr_vertex not in shortest_path:
        shortest_path[curr_vertex] = curr_dist

        for neigh,weight in d[curr_vertex]:
            heapq.heappush(queue,(curr_dist+weight,neigh))

print(shortest_path)

    





example_graph = {
    'U': {'V': 2, 'W': 5, 'X': 1},
    'V': {'U': 2, 'X': 2, 'W': 3},
    'W': {'V': 3, 'U': 5, 'X': 3, 'Y': 1, 'Z': 5},
    'X': {'U': 1, 'V': 2, 'W': 3, 'Y': 1},
    'Y': {'X': 1, 'W': 1, 'Z': 1},
    'Z': {'W': 5, 'Y': 1},
}
print(calculate_distances(example_graph, 'X'))
# => {'U': 1, 'W': 2, 'V': 2, 'Y': 1, 'X': 0, 'Z': 2}


